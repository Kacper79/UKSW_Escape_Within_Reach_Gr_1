//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MovementPlayerInput"",
            ""id"": ""21800b80-f063-42e3-96e2-1b1ed0d71874"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""10620378-fe1e-47e0-b6c3-ed4b4b02adf6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""604b124f-49e4-4f71-a434-b3b8072f37eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""2ba978d7-e57c-42dd-9a93-2e9044526d45"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""efd26bda-ed64-4048-ae80-86ca63c42159"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""c23858f0-b9ae-4602-8b7a-114f05386973"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aa6a54b7-6358-4729-95ec-d668af3ab665"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a101ce83-e2f2-4601-a191-53d5e2736439"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ada94ea1-f029-4dcb-bc29-d13c48542b39"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""90aa1035-dec0-4cdc-afcf-f42782e424ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d1480e1-3889-4b7d-b657-c221efc60020"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""230145ac-fce5-403c-a8ed-eedd8b8f4e2b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a5a2e28-d5f0-46b8-8f5b-e721e0e15236"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc9c78c4-5273-4ccf-b0e4-98c571e9ae64"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b163c02e-aa81-429f-a553-9d68faf098ac"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AttackPlayerInput"",
            ""id"": ""896aad7f-d2d4-4ae0-ba91-038006fd0946"",
            ""actions"": [
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""e7fb65aa-eb1d-4725-99b0-2c33f06dc2b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StrongPunch"",
                    ""type"": ""Button"",
                    ""id"": ""ce00a670-eb0d-4628-a9d1-4a5ea62c2b4c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightPunch"",
                    ""type"": ""Button"",
                    ""id"": ""98dd7eb5-7c4c-448f-93a9-1f331aac7903"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""36a119db-2e89-4e01-8a46-a0584ece8b67"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7f3b283-b72f-4197-bf30-35412390e1ed"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9089466a-b0f8-49b4-aead-7fc296e2c06a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrongPunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efa025dd-140e-4a10-9632-5072c628e837"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap(duration=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightPunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc1ff13c-139e-4bd4-82c3-1ac45aba40da"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractPlayerInput"",
            ""id"": ""40f071d4-aa21-4431-be1d-312d693a7798"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5711607f-e77b-4e31-bd80-f5b4865ce2cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0917a04e-13e4-479c-b5c0-77bef7f4a569"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FunctionalPlayerInput"",
            ""id"": ""80acbbc3-5dbd-4ee9-bd93-08cd7ea89d4d"",
            ""actions"": [
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""56e93159-7e06-44a6-a637-4408db92644b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenQuestLog"",
                    ""type"": ""Button"",
                    ""id"": ""f64a2695-f043-42de-9a4d-76c22c15e5b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenAchievements"",
                    ""type"": ""Button"",
                    ""id"": ""abfeb2de-a6aa-4b61-b25d-444511fe2cf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e98f70ed-120e-494b-a1fe-64cbb10db2ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowCoin"",
                    ""type"": ""Button"",
                    ""id"": ""a9d4ce11-51ac-4a61-9195-b3c3db8bbb45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCigaretts"",
                    ""type"": ""Button"",
                    ""id"": ""0c6d56b8-f7d0-436d-9c62-121b5abb0bd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71f2dfc1-e9d6-4fed-b62f-9e7e36969705"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4633ad8d-7a70-4f11-88b8-9043101506ca"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenQuestLog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1184c3f-329e-44e0-af6d-f18d92211644"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenAchievements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf376fa5-067c-480c-b99b-685dd8185006"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d918b2f5-412f-40ef-a9bc-cc0ddca72001"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowCoin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb031502-c9dd-423b-92f5-de7b57cd7c75"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCigaretts"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InPlayerAssetsUIPlayerInput"",
            ""id"": ""239fd66e-f5c9-4952-ba0c-c77c79c45fa2"",
            ""actions"": [
                {
                    ""name"": ""CloseWindow"",
                    ""type"": ""Button"",
                    ""id"": ""911b5180-e67f-4eae-b776-bc53bc6c1424"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""338655fd-b60c-4f84-bfe8-8edd61adb82a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseWindow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementPlayerInput
        m_MovementPlayerInput = asset.FindActionMap("MovementPlayerInput", throwIfNotFound: true);
        m_MovementPlayerInput_Move = m_MovementPlayerInput.FindAction("Move", throwIfNotFound: true);
        m_MovementPlayerInput_Jump = m_MovementPlayerInput.FindAction("Jump", throwIfNotFound: true);
        m_MovementPlayerInput_Crouch = m_MovementPlayerInput.FindAction("Crouch", throwIfNotFound: true);
        m_MovementPlayerInput_Sprint = m_MovementPlayerInput.FindAction("Sprint", throwIfNotFound: true);
        m_MovementPlayerInput_LookAround = m_MovementPlayerInput.FindAction("LookAround", throwIfNotFound: true);
        // AttackPlayerInput
        m_AttackPlayerInput = asset.FindActionMap("AttackPlayerInput", throwIfNotFound: true);
        m_AttackPlayerInput_Block = m_AttackPlayerInput.FindAction("Block", throwIfNotFound: true);
        m_AttackPlayerInput_StrongPunch = m_AttackPlayerInput.FindAction("StrongPunch", throwIfNotFound: true);
        m_AttackPlayerInput_LightPunch = m_AttackPlayerInput.FindAction("LightPunch", throwIfNotFound: true);
        m_AttackPlayerInput_Dash = m_AttackPlayerInput.FindAction("Dash", throwIfNotFound: true);
        // InteractPlayerInput
        m_InteractPlayerInput = asset.FindActionMap("InteractPlayerInput", throwIfNotFound: true);
        m_InteractPlayerInput_Interact = m_InteractPlayerInput.FindAction("Interact", throwIfNotFound: true);
        // FunctionalPlayerInput
        m_FunctionalPlayerInput = asset.FindActionMap("FunctionalPlayerInput", throwIfNotFound: true);
        m_FunctionalPlayerInput_OpenInventory = m_FunctionalPlayerInput.FindAction("OpenInventory", throwIfNotFound: true);
        m_FunctionalPlayerInput_OpenQuestLog = m_FunctionalPlayerInput.FindAction("OpenQuestLog", throwIfNotFound: true);
        m_FunctionalPlayerInput_OpenAchievements = m_FunctionalPlayerInput.FindAction("OpenAchievements", throwIfNotFound: true);
        m_FunctionalPlayerInput_Pause = m_FunctionalPlayerInput.FindAction("Pause", throwIfNotFound: true);
        m_FunctionalPlayerInput_ThrowCoin = m_FunctionalPlayerInput.FindAction("ThrowCoin", throwIfNotFound: true);
        m_FunctionalPlayerInput_UseCigaretts = m_FunctionalPlayerInput.FindAction("UseCigaretts", throwIfNotFound: true);
        // InPlayerAssetsUIPlayerInput
        m_InPlayerAssetsUIPlayerInput = asset.FindActionMap("InPlayerAssetsUIPlayerInput", throwIfNotFound: true);
        m_InPlayerAssetsUIPlayerInput_CloseWindow = m_InPlayerAssetsUIPlayerInput.FindAction("CloseWindow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementPlayerInput
    private readonly InputActionMap m_MovementPlayerInput;
    private List<IMovementPlayerInputActions> m_MovementPlayerInputActionsCallbackInterfaces = new List<IMovementPlayerInputActions>();
    private readonly InputAction m_MovementPlayerInput_Move;
    private readonly InputAction m_MovementPlayerInput_Jump;
    private readonly InputAction m_MovementPlayerInput_Crouch;
    private readonly InputAction m_MovementPlayerInput_Sprint;
    private readonly InputAction m_MovementPlayerInput_LookAround;
    public struct MovementPlayerInputActions
    {
        private @PlayerInput m_Wrapper;
        public MovementPlayerInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementPlayerInput_Move;
        public InputAction @Jump => m_Wrapper.m_MovementPlayerInput_Jump;
        public InputAction @Crouch => m_Wrapper.m_MovementPlayerInput_Crouch;
        public InputAction @Sprint => m_Wrapper.m_MovementPlayerInput_Sprint;
        public InputAction @LookAround => m_Wrapper.m_MovementPlayerInput_LookAround;
        public InputActionMap Get() { return m_Wrapper.m_MovementPlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementPlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IMovementPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementPlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementPlayerInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @LookAround.started += instance.OnLookAround;
            @LookAround.performed += instance.OnLookAround;
            @LookAround.canceled += instance.OnLookAround;
        }

        private void UnregisterCallbacks(IMovementPlayerInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @LookAround.started -= instance.OnLookAround;
            @LookAround.performed -= instance.OnLookAround;
            @LookAround.canceled -= instance.OnLookAround;
        }

        public void RemoveCallbacks(IMovementPlayerInputActions instance)
        {
            if (m_Wrapper.m_MovementPlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementPlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementPlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementPlayerInputActions @MovementPlayerInput => new MovementPlayerInputActions(this);

    // AttackPlayerInput
    private readonly InputActionMap m_AttackPlayerInput;
    private List<IAttackPlayerInputActions> m_AttackPlayerInputActionsCallbackInterfaces = new List<IAttackPlayerInputActions>();
    private readonly InputAction m_AttackPlayerInput_Block;
    private readonly InputAction m_AttackPlayerInput_StrongPunch;
    private readonly InputAction m_AttackPlayerInput_LightPunch;
    private readonly InputAction m_AttackPlayerInput_Dash;
    public struct AttackPlayerInputActions
    {
        private @PlayerInput m_Wrapper;
        public AttackPlayerInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Block => m_Wrapper.m_AttackPlayerInput_Block;
        public InputAction @StrongPunch => m_Wrapper.m_AttackPlayerInput_StrongPunch;
        public InputAction @LightPunch => m_Wrapper.m_AttackPlayerInput_LightPunch;
        public InputAction @Dash => m_Wrapper.m_AttackPlayerInput_Dash;
        public InputActionMap Get() { return m_Wrapper.m_AttackPlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackPlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IAttackPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackPlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackPlayerInputActionsCallbackInterfaces.Add(instance);
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
            @StrongPunch.started += instance.OnStrongPunch;
            @StrongPunch.performed += instance.OnStrongPunch;
            @StrongPunch.canceled += instance.OnStrongPunch;
            @LightPunch.started += instance.OnLightPunch;
            @LightPunch.performed += instance.OnLightPunch;
            @LightPunch.canceled += instance.OnLightPunch;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IAttackPlayerInputActions instance)
        {
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
            @StrongPunch.started -= instance.OnStrongPunch;
            @StrongPunch.performed -= instance.OnStrongPunch;
            @StrongPunch.canceled -= instance.OnStrongPunch;
            @LightPunch.started -= instance.OnLightPunch;
            @LightPunch.performed -= instance.OnLightPunch;
            @LightPunch.canceled -= instance.OnLightPunch;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IAttackPlayerInputActions instance)
        {
            if (m_Wrapper.m_AttackPlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackPlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackPlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackPlayerInputActions @AttackPlayerInput => new AttackPlayerInputActions(this);

    // InteractPlayerInput
    private readonly InputActionMap m_InteractPlayerInput;
    private List<IInteractPlayerInputActions> m_InteractPlayerInputActionsCallbackInterfaces = new List<IInteractPlayerInputActions>();
    private readonly InputAction m_InteractPlayerInput_Interact;
    public struct InteractPlayerInputActions
    {
        private @PlayerInput m_Wrapper;
        public InteractPlayerInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_InteractPlayerInput_Interact;
        public InputActionMap Get() { return m_Wrapper.m_InteractPlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractPlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IInteractPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractPlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractPlayerInputActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IInteractPlayerInputActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IInteractPlayerInputActions instance)
        {
            if (m_Wrapper.m_InteractPlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractPlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractPlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractPlayerInputActions @InteractPlayerInput => new InteractPlayerInputActions(this);

    // FunctionalPlayerInput
    private readonly InputActionMap m_FunctionalPlayerInput;
    private List<IFunctionalPlayerInputActions> m_FunctionalPlayerInputActionsCallbackInterfaces = new List<IFunctionalPlayerInputActions>();
    private readonly InputAction m_FunctionalPlayerInput_OpenInventory;
    private readonly InputAction m_FunctionalPlayerInput_OpenQuestLog;
    private readonly InputAction m_FunctionalPlayerInput_OpenAchievements;
    private readonly InputAction m_FunctionalPlayerInput_Pause;
    private readonly InputAction m_FunctionalPlayerInput_ThrowCoin;
    private readonly InputAction m_FunctionalPlayerInput_UseCigaretts;
    public struct FunctionalPlayerInputActions
    {
        private @PlayerInput m_Wrapper;
        public FunctionalPlayerInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenInventory => m_Wrapper.m_FunctionalPlayerInput_OpenInventory;
        public InputAction @OpenQuestLog => m_Wrapper.m_FunctionalPlayerInput_OpenQuestLog;
        public InputAction @OpenAchievements => m_Wrapper.m_FunctionalPlayerInput_OpenAchievements;
        public InputAction @Pause => m_Wrapper.m_FunctionalPlayerInput_Pause;
        public InputAction @ThrowCoin => m_Wrapper.m_FunctionalPlayerInput_ThrowCoin;
        public InputAction @UseCigaretts => m_Wrapper.m_FunctionalPlayerInput_UseCigaretts;
        public InputActionMap Get() { return m_Wrapper.m_FunctionalPlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FunctionalPlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IFunctionalPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_FunctionalPlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FunctionalPlayerInputActionsCallbackInterfaces.Add(instance);
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
            @OpenQuestLog.started += instance.OnOpenQuestLog;
            @OpenQuestLog.performed += instance.OnOpenQuestLog;
            @OpenQuestLog.canceled += instance.OnOpenQuestLog;
            @OpenAchievements.started += instance.OnOpenAchievements;
            @OpenAchievements.performed += instance.OnOpenAchievements;
            @OpenAchievements.canceled += instance.OnOpenAchievements;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @ThrowCoin.started += instance.OnThrowCoin;
            @ThrowCoin.performed += instance.OnThrowCoin;
            @ThrowCoin.canceled += instance.OnThrowCoin;
            @UseCigaretts.started += instance.OnUseCigaretts;
            @UseCigaretts.performed += instance.OnUseCigaretts;
            @UseCigaretts.canceled += instance.OnUseCigaretts;
        }

        private void UnregisterCallbacks(IFunctionalPlayerInputActions instance)
        {
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
            @OpenQuestLog.started -= instance.OnOpenQuestLog;
            @OpenQuestLog.performed -= instance.OnOpenQuestLog;
            @OpenQuestLog.canceled -= instance.OnOpenQuestLog;
            @OpenAchievements.started -= instance.OnOpenAchievements;
            @OpenAchievements.performed -= instance.OnOpenAchievements;
            @OpenAchievements.canceled -= instance.OnOpenAchievements;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @ThrowCoin.started -= instance.OnThrowCoin;
            @ThrowCoin.performed -= instance.OnThrowCoin;
            @ThrowCoin.canceled -= instance.OnThrowCoin;
            @UseCigaretts.started -= instance.OnUseCigaretts;
            @UseCigaretts.performed -= instance.OnUseCigaretts;
            @UseCigaretts.canceled -= instance.OnUseCigaretts;
        }

        public void RemoveCallbacks(IFunctionalPlayerInputActions instance)
        {
            if (m_Wrapper.m_FunctionalPlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFunctionalPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_FunctionalPlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FunctionalPlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FunctionalPlayerInputActions @FunctionalPlayerInput => new FunctionalPlayerInputActions(this);

    // InPlayerAssetsUIPlayerInput
    private readonly InputActionMap m_InPlayerAssetsUIPlayerInput;
    private List<IInPlayerAssetsUIPlayerInputActions> m_InPlayerAssetsUIPlayerInputActionsCallbackInterfaces = new List<IInPlayerAssetsUIPlayerInputActions>();
    private readonly InputAction m_InPlayerAssetsUIPlayerInput_CloseWindow;
    public struct InPlayerAssetsUIPlayerInputActions
    {
        private @PlayerInput m_Wrapper;
        public InPlayerAssetsUIPlayerInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseWindow => m_Wrapper.m_InPlayerAssetsUIPlayerInput_CloseWindow;
        public InputActionMap Get() { return m_Wrapper.m_InPlayerAssetsUIPlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InPlayerAssetsUIPlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IInPlayerAssetsUIPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InPlayerAssetsUIPlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InPlayerAssetsUIPlayerInputActionsCallbackInterfaces.Add(instance);
            @CloseWindow.started += instance.OnCloseWindow;
            @CloseWindow.performed += instance.OnCloseWindow;
            @CloseWindow.canceled += instance.OnCloseWindow;
        }

        private void UnregisterCallbacks(IInPlayerAssetsUIPlayerInputActions instance)
        {
            @CloseWindow.started -= instance.OnCloseWindow;
            @CloseWindow.performed -= instance.OnCloseWindow;
            @CloseWindow.canceled -= instance.OnCloseWindow;
        }

        public void RemoveCallbacks(IInPlayerAssetsUIPlayerInputActions instance)
        {
            if (m_Wrapper.m_InPlayerAssetsUIPlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInPlayerAssetsUIPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InPlayerAssetsUIPlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InPlayerAssetsUIPlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InPlayerAssetsUIPlayerInputActions @InPlayerAssetsUIPlayerInput => new InPlayerAssetsUIPlayerInputActions(this);
    public interface IMovementPlayerInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnLookAround(InputAction.CallbackContext context);
    }
    public interface IAttackPlayerInputActions
    {
        void OnBlock(InputAction.CallbackContext context);
        void OnStrongPunch(InputAction.CallbackContext context);
        void OnLightPunch(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IInteractPlayerInputActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IFunctionalPlayerInputActions
    {
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnOpenQuestLog(InputAction.CallbackContext context);
        void OnOpenAchievements(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnThrowCoin(InputAction.CallbackContext context);
        void OnUseCigaretts(InputAction.CallbackContext context);
    }
    public interface IInPlayerAssetsUIPlayerInputActions
    {
        void OnCloseWindow(InputAction.CallbackContext context);
    }
}
